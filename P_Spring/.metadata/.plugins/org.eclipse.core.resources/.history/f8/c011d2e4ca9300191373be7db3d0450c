package com.pjs.game;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class HomeController {
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		model.addAttribute("select_result", dbCommon.selectDataTableTag(new Player()));
		return "list";
	}

	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String join(Locale locale, Model model) {
		return "join";
	}

	@RequestMapping(value = "/my_account", method = RequestMethod.GET)
	public String myAccount(Locale locale, Model model, HttpServletRequest request) {
		HttpSession session = request.getSession();
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		if (session != null && session.getAttribute("user_idx") != null) {
			model.addAllAttributes(dbCommon.detailsData(new Player(), (Integer) session.getAttribute("user_idx")));
		}
		return "my_card";
	}

	@RequestMapping(value = "/do_join", method = RequestMethod.POST)
	public String doJoin(Locale locale, Model model, @RequestParam("id") String id,
			@RequestParam("password") String password, @RequestParam("name") String name) {
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-256");
			md.update(password.getBytes());
			StringBuilder sb = new StringBuilder();
			for (byte b : md.digest()) {
				sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
			}
			password = sb.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		dbCommon.insertData(new Player(id, password, name));
		model.addAttribute("message", "가입되었습니다.");
		return "done";
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(Locale locale, Model model) {
		return "sign_in";
	}

	@RequestMapping(value = "/do_login", method = RequestMethod.POST)
	public String doLogin(Locale locale, Model model, HttpServletRequest request, @RequestParam("id") String id,
			@RequestParam("password") String password) {
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-256");
			md.update(password.getBytes());
			StringBuilder sb = new StringBuilder();
			for (byte b : md.digest()) {
				sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
			}
			password = sb.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		int userIdx = dbCommon.signIn(id, password);
		if (userIdx > 0) {
			HttpSession session = request.getSession();
			session.setAttribute("user_idx", userIdx);
			return "redirect:/";
		}
		return "redirect:/login";
	}

	
	
	@RequestMapping(value = "/change_card", method = RequestMethod.GET)
	   public String changeCard(Locale locale, Model model, HttpServletRequest request) {
//	      DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.db", "player");
//	      HttpSession session = request.getSession();
//	      HashMap<String, String> userData = dbCommon.detailsData(new Player(), (Integer)session.getAttribute("user_idx"));
//	      int idx = Integer.parseInt(userData.get("idx"));
//	      String id = userData.get("id");
//	      String password = userData.get("password");
//	      String name = userData.get("name");
//	      dbCommon.updateData(new Player(id, password, name), idx);
	      HttpSession session = request.getSession();
	      int idx= (Integer)session.getAttribute("user_idx");
	      Update update = new Update();
	      update.method2(idx);
	      return "redirect:/my_account";
	   }
	
//	
//	@RequestMapping(value = "/choose", method = RequestMethod.GET)
//	public String choose(Locale locale, Model model, @RequestParam(value="idx", required=false) List<Integer> values) {
//		int userIdx1 = values.get(0);
//		int userIdx2 = values.get(1);
//		model.addAttribute("choice1", userIdx1);
//		model.addAttribute("choice2", userIdx2);
//		return "list";
//	}

//	@RequestMapping(value = "/battle_start", method = RequestMethod.GET)
//	public String battleStart(Locale locale, Model model,HttpServletRequest request, @RequestParam("select1") String select1, @RequestParam("select2") String select2) {
//		HttpSession session = request.getSession();
//		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
//		model.addAllAttributes(dbCommon.detailsData(new Player(), Integer.parseInt(select1)));
//		model.addAllAttributes(dbCommon.detailsData2(new Player(), Integer.parseInt(select2)));
//		return "battle";
//	}

	// jongsun
	@RequestMapping(value = "/battle_start", method = RequestMethod.GET)
	public String battleStart(Locale locale, Model model, HttpServletRequest request,
			@RequestParam("select1") String select1, @RequestParam("select2") String select2) {
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		model.addAttribute("player1", dbCommon.selectDataTableDiv(new Player(), Integer.parseInt(select1), 1));
		model.addAttribute("player2", dbCommon.selectDataTableDiv(new Player(), Integer.parseInt(select2), 2));
		return "battle";
	}

	@RequestMapping(value = "/do_battle", method = RequestMethod.GET)
	public String doBattle(Locale locale, Model model, HttpServletRequest request,
			@RequestParam("select1") int select1, @RequestParam("select2") int select2) {
		HttpSession session = request.getSession();
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		Player player1 = new Player(select1);
		Player player2 = new Player(select2);
		model.addAttribute("player2", dbCommon.selectDataTableDiv(new Player(), Integer.parseInt(select2), 2));
		int select1Idx = player1.idx;
		String select1Name = player1.name;
		int select1AttackPower = player1.attackPower;
		int select1AttackRate = player1.attackRate;
		int select1defensePower = player1.defensePower;
		int select1defenseRate = player1.defenseRate;
		int select1HP = player1.hp;
		
		int select2Idx = Integer.parseInt((String)session.getAttribute("select2_idx"));
		String select2Name = (String)session.getAttribute("select2_name");
		int select2AttackPower = Integer.parseInt((String)session.getAttribute("select2_attackPower"));
		int select2AttackRate = Integer.parseInt((String)session.getAttribute("select2_attackRate"));
		int select2defensePower = Integer.parseInt((String)session.getAttribute("select2_defensePower"));
		int select2defenseRate = Integer.parseInt((String)session.getAttribute("select2_defenseRate"));
		int select2HP = Integer.parseInt((String)session.getAttribute("select2_hp"));
		
		DBCommon<Player> dbCommon = new DBCommon<Player>("c:\\tomcat\\game.sqlite", "player");
		model.addAttribute("player1", dbCommon.selectDataTableDiv(new Player(), Integer.parseInt(select1), 1));
		model.addAttribute("player2", dbCommon.selectDataTableDiv(new Player(), Integer.parseInt(select2), 2));
		return "battle";
	}

}
